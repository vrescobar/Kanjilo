// Generated by Haxe
(function (console, $global) { "use strict";
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Extractor = function() {
	var bytes = haxe_Resource.getBytes("serialized_kanji_dict");
	var uncomp = haxe_zip_Uncompress.run(bytes,1024);
	var unserializer = new haxe_Unserializer(uncomp.getString(0,uncomp.length));
	Extractor.meanings = unserializer.unserialize();
	null;
};
$hxClasses["Extractor"] = Extractor;
Extractor.__name__ = true;
Extractor.utfInt2string = function(inp_Int) {
	var u = new haxe_Utf8();
	u.__b += String.fromCharCode(inp_Int);
	return u.__b;
};
Extractor.prototype = {
	getMeaning: function(element) {
		if(Extractor.meanings.exists(element)) return Extractor.meanings.get(element); else return [];
	}
	,freq_and_meanings: function(text) {
		var all_kanji = new haxe_ds_IntMap();
		haxe_Utf8.iter(text,function(letter) {
			if(letter >= 19968 && letter <= 40879) {
				if(all_kanji.h.hasOwnProperty(letter)) {
					var _g = letter;
					var v = all_kanji.h[_g] + 1;
					all_kanji.h[_g] = v;
					v;
				} else all_kanji.h[letter] = 1;
			}
		});
		var arr;
		var _g1 = [];
		var $it0 = all_kanji.keys();
		while( $it0.hasNext() ) {
			var kanji = $it0.next();
			_g1.push({ freq : all_kanji.h[kanji], kanji : Extractor.utfInt2string(kanji), meaning : this.getMeaning(Extractor.utfInt2string(kanji)).join(", ")});
		}
		arr = _g1;
		arr.sort(function(old,nnew) {
			return nnew.freq - old.freq;
		});
		return arr;
	}
	,__class__: Extractor
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = true;
HxOverrides.strDate = function(s) {
	var _g = s.length;
	switch(_g) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d.setTime(0);
		d.setUTCHours(k[0]);
		d.setUTCMinutes(k[1]);
		d.setUTCSeconds(k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) return undefined;
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) len = s.length; else if(len < 0) {
		if(pos == 0) len = s.length + len; else return "";
	}
	if(pos < 0) {
		pos = s.length + pos;
		if(pos < 0) pos = 0;
	}
	return s.substr(pos,len);
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var List = function() {
	this.length = 0;
};
$hxClasses["List"] = List;
List.__name__ = true;
List.prototype = {
	add: function(item) {
		var x = [item];
		if(this.h == null) this.h = x; else this.q[1] = x;
		this.q = x;
		this.length++;
	}
	,iterator: function() {
		return new _$List_ListIterator(this.h);
	}
	,__class__: List
};
var _$List_ListIterator = function(head) {
	this.head = head;
	this.val = null;
};
$hxClasses["_List.ListIterator"] = _$List_ListIterator;
_$List_ListIterator.__name__ = true;
_$List_ListIterator.prototype = {
	hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		this.val = this.head[0];
		this.head = this.head[1];
		return this.val;
	}
	,__class__: _$List_ListIterator
};
var MainJS = function() { };
$hxClasses["MainJS"] = MainJS;
MainJS.__name__ = true;
MainJS.main = function() {
	MainJS.ext = new Extractor();
	var html = hxdom_js_Boot.init();
	var modalGroup = new hxdom_bootstrap_ModalGroup();
	hxdom_DomTools.append(Reflect.field(html.node.childNodes[1],"__vdom"),modalGroup);
	var cont = hxdom_BSTools.container(new hxdom_EDiv());
	MainJS.inptxt = new hxdom_ETextArea();
	hxdom_DomTools.addText(hxdom_DomTools.setAttr(hxdom_DomTools.addClass(hxdom_DomTools.setAttr(hxdom_DomTools.setAttr(hxdom_DomTools.setAttr(hxdom_DomTools.setAttr(MainJS.inptxt,"id","user_input"),"style","width:100%"),"spellcheck","false"),"autocomplete","off"),"form-control"),"rows","3"),MainJS.exampleText);
	MainJS.inptxt.addEventListener("input",MainJS.updateTable);
	var col1 = hxdom_DomTools.append(hxdom_DomTools.append(hxdom_DomTools.append(hxdom_DomTools.append(hxdom_DomTools.append(new hxdom_EDiv(),hxdom_DomTools.setText(new hxdom_EHeader1(),"Find kanji's meanings")),hxdom_DomTools.addText(hxdom_BSTools.lead(hxdom_BSTools.textAlign(new hxdom_EParagraph(),hxdom_TextAlign.Right)),"Introduce a text in japanese, this page will prepare you a study table with the kanji meanings.")),hxdom_DomTools.addText(new hxdom_EParagraph(),"I was a fan of Heisig's RTK method but I did not want to learn the whole list of kanji before start with the language. My approach is being lazy: do not learn a kanji until it is necessary. In a normal kanji memorizing session I would focus only on the kanji which will appear in the next study lesson. Feel free to copy the generated table in a spreadsheet and prepare or format it at your will before your actual study.")),MainJS.inptxt),hxdom_DomTools.addText(hxdom_DomTools.setAttr(new hxdom_EParagraph(),"style","width:100%"),"Careful on Google Chrome: it is extremely slow pasting large chunks of text, this is a known error and it has been reported to google already."));
	var panel = new hxdom_bootstrap_Panel(hxdom_bootstrap_PanelType.Primary);
	hxdom_DomTools.append(panel.body,hxdom_DomTools.addText(new hxdom_EParagraph(),"List of kanji ordered by frequency in the given text"));
	hxdom_DomTools.append(panel,MainJS.populate_table(MainJS.ext.freq_and_meanings(MainJS.exampleText)));
	var disclaimer = hxdom_DomTools.addText(hxdom_DomTools.setAttr(new hxdom_EParagraph(),"style","color:#D0D0D0"),haxe_Resource.getString("cc_disclaimer"));
	hxdom_DomTools.append(hxdom_DomTools.append(hxdom_DomTools.append(cont,col1),panel),disclaimer);
	var body = hxdom_DomTools.append(new hxdom_EBody(),cont);
	hxdom_DomTools.append(html,body);
	null;
};
MainJS.updateTable = function(_) {
	var parent = hxdom_DomTools.parent(MainJS.table);
	hxdom_DomTools.remove(MainJS.table);
	var input_text = MainJS.inptxt.node.value;
	hxdom_DomTools.append(parent,MainJS.populate_table(MainJS.ext.freq_and_meanings(input_text)));
};
MainJS.populate_table = function(frequencies) {
	var rows = [[new hxdom_Text("#"),new hxdom_Text("Kanji"),new hxdom_Text("Meaning")]];
	var _g = 0;
	while(_g < frequencies.length) {
		var kf = frequencies[_g];
		++_g;
		rows.push([new hxdom_Text(kf.freq == null?"null":"" + kf.freq),new hxdom_Text(kf.kanji),new hxdom_Text(kf.meaning)]);
	}
	MainJS.table = hxdom_bootstrap_Table.build(rows,[hxdom_bootstrap_TableOptions.Hover,hxdom_bootstrap_TableOptions.Striped]);
	return MainJS.table;
};
Math.__name__ = true;
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		return null;
	}
};
Reflect.setField = function(o,field,value) {
	o[field] = value;
};
Reflect.callMethod = function(o,func,args) {
	return func.apply(o,args);
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) a.push(f);
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	return typeof(f) == "function" && !(f.__name__ || f.__ename__);
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) v = parseInt(x);
	if(isNaN(v)) return null;
	return v;
};
Std.parseFloat = function(x) {
	return parseFloat(x);
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = true;
StringTools.startsWith = function(s,start) {
	return s.length >= start.length && HxOverrides.substr(s,0,start.length) == start;
};
StringTools.fastCodeAt = function(s,index) {
	return s.charCodeAt(index);
};
var ValueType = $hxClasses["ValueType"] = { __ename__ : true, __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"] };
ValueType.TNull = ["TNull",0];
ValueType.TNull.toString = $estr;
ValueType.TNull.__enum__ = ValueType;
ValueType.TInt = ["TInt",1];
ValueType.TInt.toString = $estr;
ValueType.TInt.__enum__ = ValueType;
ValueType.TFloat = ["TFloat",2];
ValueType.TFloat.toString = $estr;
ValueType.TFloat.__enum__ = ValueType;
ValueType.TBool = ["TBool",3];
ValueType.TBool.toString = $estr;
ValueType.TBool.__enum__ = ValueType;
ValueType.TObject = ["TObject",4];
ValueType.TObject.toString = $estr;
ValueType.TObject.__enum__ = ValueType;
ValueType.TFunction = ["TFunction",5];
ValueType.TFunction.toString = $estr;
ValueType.TFunction.__enum__ = ValueType;
ValueType.TClass = function(c) { var $x = ["TClass",6,c]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TEnum = function(e) { var $x = ["TEnum",7,e]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TUnknown = ["TUnknown",8];
ValueType.TUnknown.toString = $estr;
ValueType.TUnknown.__enum__ = ValueType;
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = true;
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) return null;
	return cl;
};
Type.resolveEnum = function(name) {
	var e = $hxClasses[name];
	if(e == null || !e.__ename__) return null;
	return e;
};
Type.createEmptyInstance = function(cl) {
	function empty() {}; empty.prototype = cl.prototype;
	return new empty();
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) throw new js__$Boot_HaxeError("No such constructor " + constr);
	if(Reflect.isFunction(f)) {
		if(params == null) throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
		return Reflect.callMethod(e,f,params);
	}
	if(params != null && params.length != 0) throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
	return f;
};
Type.getEnumConstructs = function(e) {
	var a = e.__constructs__;
	return a.slice();
};
Type["typeof"] = function(v) {
	var _g = typeof(v);
	switch(_g) {
	case "boolean":
		return ValueType.TBool;
	case "string":
		return ValueType.TClass(String);
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) return ValueType.TInt;
		return ValueType.TFloat;
	case "object":
		if(v == null) return ValueType.TNull;
		var e = v.__enum__;
		if(e != null) return ValueType.TEnum(e);
		var c = js_Boot.getClass(v);
		if(c != null) return ValueType.TClass(c);
		return ValueType.TObject;
	case "function":
		if(v.__name__ || v.__ename__) return ValueType.TObject;
		return ValueType.TFunction;
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = true;
var haxe_Resource = function() { };
$hxClasses["haxe.Resource"] = haxe_Resource;
haxe_Resource.__name__ = true;
haxe_Resource.getString = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) return x.str;
			var b = haxe_crypto_Base64.decode(x.data);
			return b.toString();
		}
	}
	return null;
};
haxe_Resource.getBytes = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) return haxe_io_Bytes.ofString(x.str);
			return haxe_crypto_Base64.decode(x.data);
		}
	}
	return null;
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = Type;
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.setResolver(r);
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = true;
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g1 = 0;
	var _g = haxe_Unserializer.BASE64.length;
	while(_g1 < _g) {
		var i = _g1++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.prototype = {
	setResolver: function(r) {
		if(r == null) this.resolver = { resolveClass : function(_) {
			return null;
		}, resolveEnum : function(_1) {
			return null;
		}}; else this.resolver = r;
	}
	,get: function(p) {
		return this.buf.charCodeAt(p);
	}
	,readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) break;
			if(c == 45) {
				if(this.pos != fpos) break;
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) break;
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) k *= -1;
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c >= 43 && c < 58 || c == 101 || c == 69) this.pos++; else break;
		}
		return Std.parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) throw new js__$Boot_HaxeError("Invalid object");
			if(this.buf.charCodeAt(this.pos) == 103) break;
			var k = this.unserialize();
			if(!(typeof(k) == "string")) throw new js__$Boot_HaxeError("Invalid object key");
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.get(this.pos++) != 58) throw new js__$Boot_HaxeError("Invalid enum format");
		var nargs = this.readDigits();
		if(nargs == 0) return Type.createEnum(edecl,tag);
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		var _g = this.get(this.pos++);
		switch(_g) {
		case 110:
			return null;
		case 116:
			return true;
		case 102:
			return false;
		case 122:
			return 0;
		case 105:
			return this.readDigits();
		case 100:
			return this.readFloat();
		case 121:
			var len = this.readDigits();
			if(this.get(this.pos++) != 58 || this.length - this.pos < len) throw new js__$Boot_HaxeError("Invalid string length");
			var s = HxOverrides.substr(this.buf,this.pos,len);
			this.pos += len;
			s = decodeURIComponent(s.split("+").join(" "));
			this.scache.push(s);
			return s;
		case 107:
			return NaN;
		case 109:
			return -Infinity;
		case 112:
			return Infinity;
		case 97:
			var buf = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n = this.readDigits();
					a[a.length + n - 1] = null;
				} else a.push(this.unserialize());
			}
			return a;
		case 111:
			var o = { };
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 114:
			var n1 = this.readDigits();
			if(n1 < 0 || n1 >= this.cache.length) throw new js__$Boot_HaxeError("Invalid reference");
			return this.cache[n1];
		case 82:
			var n2 = this.readDigits();
			if(n2 < 0 || n2 >= this.scache.length) throw new js__$Boot_HaxeError("Invalid string reference");
			return this.scache[n2];
		case 120:
			throw new js__$Boot_HaxeError(this.unserialize());
			break;
		case 99:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) throw new js__$Boot_HaxeError("Class not found " + name);
			var o1 = Type.createEmptyInstance(cl);
			this.cache.push(o1);
			this.unserializeObject(o1);
			return o1;
		case 119:
			var name1 = this.unserialize();
			var edecl = this.resolver.resolveEnum(name1);
			if(edecl == null) throw new js__$Boot_HaxeError("Enum not found " + name1);
			var e = this.unserializeEnum(edecl,this.unserialize());
			this.cache.push(e);
			return e;
		case 106:
			var name2 = this.unserialize();
			var edecl1 = this.resolver.resolveEnum(name2);
			if(edecl1 == null) throw new js__$Boot_HaxeError("Enum not found " + name2);
			this.pos++;
			var index = this.readDigits();
			var tag = Type.getEnumConstructs(edecl1)[index];
			if(tag == null) throw new js__$Boot_HaxeError("Unknown enum index " + name2 + "@" + index);
			var e1 = this.unserializeEnum(edecl1,tag);
			this.cache.push(e1);
			return e1;
		case 108:
			var l = new List();
			this.cache.push(l);
			var buf1 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 98:
			var h = new haxe_ds_StringMap();
			this.cache.push(h);
			var buf2 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s1 = this.unserialize();
				h.set(s1,this.unserialize());
			}
			this.pos++;
			return h;
		case 113:
			var h1 = new haxe_ds_IntMap();
			this.cache.push(h1);
			var buf3 = this.buf;
			var c1 = this.get(this.pos++);
			while(c1 == 58) {
				var i = this.readDigits();
				h1.set(i,this.unserialize());
				c1 = this.get(this.pos++);
			}
			if(c1 != 104) throw new js__$Boot_HaxeError("Invalid IntMap format");
			return h1;
		case 77:
			var h2 = new haxe_ds_ObjectMap();
			this.cache.push(h2);
			var buf4 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s2 = this.unserialize();
				h2.set(s2,this.unserialize());
			}
			this.pos++;
			return h2;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				var s3 = HxOverrides.substr(this.buf,this.pos,19);
				d = HxOverrides.strDate(s3);
				this.pos += 19;
			} else {
				var t = this.readFloat();
				var d1 = new Date();
				d1.setTime(t);
				d = d1;
			}
			this.cache.push(d);
			return d;
		case 115:
			var len1 = this.readDigits();
			var buf5 = this.buf;
			if(this.get(this.pos++) != 58 || this.length - this.pos < len1) throw new js__$Boot_HaxeError("Invalid bytes length");
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i1 = this.pos;
			var rest = len1 & 3;
			var size;
			size = (len1 >> 2) * 3 + (rest >= 2?rest - 1:0);
			var max = i1 + (len1 - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			var bpos = 0;
			while(i1 < max) {
				var c11 = codes[StringTools.fastCodeAt(buf5,i1++)];
				var c2 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c11 << 2 | c2 >> 4);
				var c3 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c2 << 4 | c3 >> 2);
				var c4 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c3 << 6 | c4);
			}
			if(rest >= 2) {
				var c12 = codes[StringTools.fastCodeAt(buf5,i1++)];
				var c21 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c12 << 2 | c21 >> 4);
				if(rest == 3) {
					var c31 = codes[StringTools.fastCodeAt(buf5,i1++)];
					bytes.set(bpos++,c21 << 4 | c31 >> 2);
				}
			}
			this.pos += len1;
			this.cache.push(bytes);
			return bytes;
		case 67:
			var name3 = this.unserialize();
			var cl1 = this.resolver.resolveClass(name3);
			if(cl1 == null) throw new js__$Boot_HaxeError("Class not found " + name3);
			var o2 = Type.createEmptyInstance(cl1);
			this.cache.push(o2);
			o2.hxUnserialize(this);
			if(this.get(this.pos++) != 103) throw new js__$Boot_HaxeError("Invalid custom data");
			return o2;
		case 65:
			var name4 = this.unserialize();
			var cl2 = this.resolver.resolveClass(name4);
			if(cl2 == null) throw new js__$Boot_HaxeError("Class not found " + name4);
			return cl2;
		case 66:
			var name5 = this.unserialize();
			var e2 = this.resolver.resolveEnum(name5);
			if(e2 == null) throw new js__$Boot_HaxeError("Enum not found " + name5);
			return e2;
		default:
		}
		this.pos--;
		throw new js__$Boot_HaxeError("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe_Utf8 = function(size) {
	this.__b = "";
};
$hxClasses["haxe.Utf8"] = haxe_Utf8;
haxe_Utf8.__name__ = true;
haxe_Utf8.iter = function(s,chars) {
	var _g1 = 0;
	var _g = s.length;
	while(_g1 < _g) {
		var i = _g1++;
		chars(HxOverrides.cca(s,i));
	}
};
haxe_Utf8.prototype = {
	__class__: haxe_Utf8
};
var haxe_crypto_Adler32 = function() {
	this.a1 = 1;
	this.a2 = 0;
};
$hxClasses["haxe.crypto.Adler32"] = haxe_crypto_Adler32;
haxe_crypto_Adler32.__name__ = true;
haxe_crypto_Adler32.read = function(i) {
	var a = new haxe_crypto_Adler32();
	var a2a = i.readByte();
	var a2b = i.readByte();
	var a1a = i.readByte();
	var a1b = i.readByte();
	a.a1 = a1a << 8 | a1b;
	a.a2 = a2a << 8 | a2b;
	return a;
};
haxe_crypto_Adler32.prototype = {
	update: function(b,pos,len) {
		var a1 = this.a1;
		var a2 = this.a2;
		var _g1 = pos;
		var _g = pos + len;
		while(_g1 < _g) {
			var p = _g1++;
			var c = b.b[p];
			a1 = (a1 + c) % 65521;
			a2 = (a2 + a1) % 65521;
		}
		this.a1 = a1;
		this.a2 = a2;
	}
	,equals: function(a) {
		return a.a1 == this.a1 && a.a2 == this.a2;
	}
	,__class__: haxe_crypto_Adler32
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = StringTools.fastCodeAt(s,i++);
		if(55296 <= c && c <= 56319) c = c - 55232 << 10 | StringTools.fastCodeAt(s,i++) & 1023;
		if(c <= 127) a.push(c); else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.prototype = {
	get: function(pos) {
		return this.b[pos];
	}
	,set: function(pos,v) {
		this.b[pos] = v & 255;
	}
	,blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		if(srcpos == 0 && len == src.length) this.b.set(src.b,pos); else this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
	}
	,getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) break;
				s += fcc(c);
			} else if(c < 224) s += fcc((c & 63) << 6 | b[i++] & 127); else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = true;
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) complement = true;
	if(complement) while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) nbits++;
	if(nbits > 8 || len != 1 << nbits) throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = true;
haxe_crypto_BaseCode.prototype = {
	initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			tbl[this.base.b[i1]] = i1;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) this.initTable();
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.get(pin++)];
				if(i == -1) throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
				buf |= i;
			}
			curbits -= 8;
			out.set(pout++,buf >> curbits & 255);
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = true;
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	set: function(key,value) {
		this.h[key] = value;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { };
	this.h.__keys__ = { };
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = true;
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	set: function(key,value) {
		if(__map_reserved[key] != null) this.setReserved(key,value); else this.h[key] = value;
	}
	,get: function(key) {
		if(__map_reserved[key] != null) return this.getReserved(key);
		return this.h[key];
	}
	,exists: function(key) {
		if(__map_reserved[key] != null) return this.existsReserved(key);
		return this.h.hasOwnProperty(key);
	}
	,setReserved: function(key,value) {
		if(this.rh == null) this.rh = { };
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) return null; else return this.rh["$" + key];
	}
	,existsReserved: function(key) {
		if(this.rh == null) return false;
		return this.rh.hasOwnProperty("$" + key);
	}
	,keys: function() {
		var _this = this.arrayKeys();
		return HxOverrides.iter(_this);
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) out.push(key);
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) out.push(key.substr(1));
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_BytesBuffer = function() {
	this.b = [];
};
$hxClasses["haxe.io.BytesBuffer"] = haxe_io_BytesBuffer;
haxe_io_BytesBuffer.__name__ = true;
haxe_io_BytesBuffer.prototype = {
	addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		var b1 = this.b;
		var b2 = src.b;
		var _g1 = pos;
		var _g = pos + len;
		while(_g1 < _g) {
			var i = _g1++;
			this.b.push(b2[i]);
		}
	}
	,getBytes: function() {
		var bytes = new haxe_io_Bytes(new Uint8Array(this.b).buffer);
		this.b = null;
		return bytes;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Input = function() { };
$hxClasses["haxe.io.Input"] = haxe_io_Input;
haxe_io_Input.__name__ = true;
haxe_io_Input.prototype = {
	readByte: function() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		while(k > 0) {
			b[pos] = this.readByte();
			pos++;
			k--;
		}
		return len;
	}
	,read: function(nbytes) {
		var s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readUInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) return ch2 | ch1 << 8; else return ch1 | ch2 << 8;
	}
	,__class__: haxe_io_Input
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) pos = 0;
	if(len == null) len = b.length - pos;
	if(pos < 0 || len < 0 || pos + len > b.length) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
$hxClasses["haxe.io.BytesInput"] = haxe_io_BytesInput;
haxe_io_BytesInput.__name__ = true;
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	readByte: function() {
		if(this.len == 0) throw new js__$Boot_HaxeError(new haxe_io_Eof());
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		if(this.len == 0 && len > 0) throw new js__$Boot_HaxeError(new haxe_io_Eof());
		if(this.len < len) len = this.len;
		var b1 = this.b;
		var b2 = buf.b;
		var _g = 0;
		while(_g < len) {
			var i = _g++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe_io_BytesInput
});
var haxe_io_Eof = function() {
};
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = true;
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxClasses["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var haxe_zip_Huffman = $hxClasses["haxe.zip.Huffman"] = { __ename__ : true, __constructs__ : ["Found","NeedBit","NeedBits"] };
haxe_zip_Huffman.Found = function(i) { var $x = ["Found",0,i]; $x.__enum__ = haxe_zip_Huffman; $x.toString = $estr; return $x; };
haxe_zip_Huffman.NeedBit = function(left,right) { var $x = ["NeedBit",1,left,right]; $x.__enum__ = haxe_zip_Huffman; $x.toString = $estr; return $x; };
haxe_zip_Huffman.NeedBits = function(n,table) { var $x = ["NeedBits",2,n,table]; $x.__enum__ = haxe_zip_Huffman; $x.toString = $estr; return $x; };
var haxe_zip_HuffTools = function() {
};
$hxClasses["haxe.zip.HuffTools"] = haxe_zip_HuffTools;
haxe_zip_HuffTools.__name__ = true;
haxe_zip_HuffTools.prototype = {
	treeDepth: function(t) {
		switch(t[1]) {
		case 0:
			return 0;
		case 2:
			throw new js__$Boot_HaxeError("assert");
			break;
		case 1:
			var b = t[3];
			var a = t[2];
			var da = this.treeDepth(a);
			var db = this.treeDepth(b);
			return 1 + (da < db?da:db);
		}
	}
	,treeCompress: function(t) {
		var d = this.treeDepth(t);
		if(d == 0) return t;
		if(d == 1) switch(t[1]) {
		case 1:
			var b = t[3];
			var a = t[2];
			return haxe_zip_Huffman.NeedBit(this.treeCompress(a),this.treeCompress(b));
		default:
			throw new js__$Boot_HaxeError("assert");
		}
		var size = 1 << d;
		var table = [];
		var _g = 0;
		while(_g < size) {
			var i = _g++;
			table.push(haxe_zip_Huffman.Found(-1));
		}
		this.treeWalk(table,0,0,d,t);
		return haxe_zip_Huffman.NeedBits(d,table);
	}
	,treeWalk: function(table,p,cd,d,t) {
		switch(t[1]) {
		case 1:
			var b = t[3];
			var a = t[2];
			if(d > 0) {
				this.treeWalk(table,p,cd + 1,d - 1,a);
				this.treeWalk(table,p | 1 << cd,cd + 1,d - 1,b);
			} else table[p] = this.treeCompress(t);
			break;
		default:
			table[p] = this.treeCompress(t);
		}
	}
	,treeMake: function(bits,maxbits,v,len) {
		if(len > maxbits) throw new js__$Boot_HaxeError("Invalid huffman");
		var idx = v << 5 | len;
		if(bits.h.hasOwnProperty(idx)) return haxe_zip_Huffman.Found(bits.h[idx]);
		v <<= 1;
		len += 1;
		return haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,v,len),this.treeMake(bits,maxbits,v | 1,len));
	}
	,make: function(lengths,pos,nlengths,maxbits) {
		var counts = [];
		var tmp = [];
		if(maxbits > 32) throw new js__$Boot_HaxeError("Invalid huffman");
		var _g = 0;
		while(_g < maxbits) {
			var i = _g++;
			counts.push(0);
			tmp.push(0);
		}
		var _g1 = 0;
		while(_g1 < nlengths) {
			var i1 = _g1++;
			var p = lengths[i1 + pos];
			if(p >= maxbits) throw new js__$Boot_HaxeError("Invalid huffman");
			counts[p]++;
		}
		var code = 0;
		var _g11 = 1;
		var _g2 = maxbits - 1;
		while(_g11 < _g2) {
			var i2 = _g11++;
			code = code + counts[i2] << 1;
			tmp[i2] = code;
		}
		var bits = new haxe_ds_IntMap();
		var _g3 = 0;
		while(_g3 < nlengths) {
			var i3 = _g3++;
			var l = lengths[i3 + pos];
			if(l != 0) {
				var n = tmp[l - 1];
				tmp[l - 1] = n + 1;
				bits.h[n << 5 | l] = i3;
			}
		}
		return this.treeCompress(haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,0,1),this.treeMake(bits,maxbits,1,1)));
	}
	,__class__: haxe_zip_HuffTools
};
var haxe_zip__$InflateImpl_Window = function(hasCrc) {
	this.buffer = new haxe_io_Bytes(new ArrayBuffer(65536));
	this.pos = 0;
	if(hasCrc) this.crc = new haxe_crypto_Adler32();
};
$hxClasses["haxe.zip._InflateImpl.Window"] = haxe_zip__$InflateImpl_Window;
haxe_zip__$InflateImpl_Window.__name__ = true;
haxe_zip__$InflateImpl_Window.prototype = {
	slide: function() {
		if(this.crc != null) this.crc.update(this.buffer,0,32768);
		var b = new haxe_io_Bytes(new ArrayBuffer(65536));
		this.pos -= 32768;
		b.blit(0,this.buffer,32768,this.pos);
		this.buffer = b;
	}
	,addBytes: function(b,p,len) {
		if(this.pos + len > 65536) this.slide();
		this.buffer.blit(this.pos,b,p,len);
		this.pos += len;
	}
	,addByte: function(c) {
		if(this.pos == 65536) this.slide();
		this.buffer.b[this.pos] = c & 255;
		this.pos++;
	}
	,getLastChar: function() {
		return this.buffer.b[this.pos - 1];
	}
	,available: function() {
		return this.pos;
	}
	,checksum: function() {
		if(this.crc != null) this.crc.update(this.buffer,0,this.pos);
		return this.crc;
	}
	,__class__: haxe_zip__$InflateImpl_Window
};
var haxe_zip__$InflateImpl_State = $hxClasses["haxe.zip._InflateImpl.State"] = { __ename__ : true, __constructs__ : ["Head","Block","CData","Flat","Crc","Dist","DistOne","Done"] };
haxe_zip__$InflateImpl_State.Head = ["Head",0];
haxe_zip__$InflateImpl_State.Head.toString = $estr;
haxe_zip__$InflateImpl_State.Head.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Block = ["Block",1];
haxe_zip__$InflateImpl_State.Block.toString = $estr;
haxe_zip__$InflateImpl_State.Block.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.CData = ["CData",2];
haxe_zip__$InflateImpl_State.CData.toString = $estr;
haxe_zip__$InflateImpl_State.CData.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Flat = ["Flat",3];
haxe_zip__$InflateImpl_State.Flat.toString = $estr;
haxe_zip__$InflateImpl_State.Flat.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Crc = ["Crc",4];
haxe_zip__$InflateImpl_State.Crc.toString = $estr;
haxe_zip__$InflateImpl_State.Crc.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Dist = ["Dist",5];
haxe_zip__$InflateImpl_State.Dist.toString = $estr;
haxe_zip__$InflateImpl_State.Dist.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.DistOne = ["DistOne",6];
haxe_zip__$InflateImpl_State.DistOne.toString = $estr;
haxe_zip__$InflateImpl_State.DistOne.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Done = ["Done",7];
haxe_zip__$InflateImpl_State.Done.toString = $estr;
haxe_zip__$InflateImpl_State.Done.__enum__ = haxe_zip__$InflateImpl_State;
var haxe_zip_InflateImpl = function(i,header,crc) {
	if(crc == null) crc = true;
	if(header == null) header = true;
	this["final"] = false;
	this.htools = new haxe_zip_HuffTools();
	this.huffman = this.buildFixedHuffman();
	this.huffdist = null;
	this.len = 0;
	this.dist = 0;
	if(header) this.state = haxe_zip__$InflateImpl_State.Head; else this.state = haxe_zip__$InflateImpl_State.Block;
	this.input = i;
	this.bits = 0;
	this.nbits = 0;
	this.needed = 0;
	this.output = null;
	this.outpos = 0;
	this.lengths = [];
	var _g = 0;
	while(_g < 19) {
		var i1 = _g++;
		this.lengths.push(-1);
	}
	this.window = new haxe_zip__$InflateImpl_Window(crc);
};
$hxClasses["haxe.zip.InflateImpl"] = haxe_zip_InflateImpl;
haxe_zip_InflateImpl.__name__ = true;
haxe_zip_InflateImpl.run = function(i,bufsize) {
	if(bufsize == null) bufsize = 65536;
	var buf = new haxe_io_Bytes(new ArrayBuffer(bufsize));
	var output = new haxe_io_BytesBuffer();
	var inflate = new haxe_zip_InflateImpl(i);
	while(true) {
		var len = inflate.readBytes(buf,0,bufsize);
		output.addBytes(buf,0,len);
		if(len < bufsize) break;
	}
	return output.getBytes();
};
haxe_zip_InflateImpl.prototype = {
	buildFixedHuffman: function() {
		if(haxe_zip_InflateImpl.FIXED_HUFFMAN != null) return haxe_zip_InflateImpl.FIXED_HUFFMAN;
		var a = [];
		var _g = 0;
		while(_g < 288) {
			var n = _g++;
			a.push(n <= 143?8:n <= 255?9:n <= 279?7:8);
		}
		haxe_zip_InflateImpl.FIXED_HUFFMAN = this.htools.make(a,0,288,10);
		return haxe_zip_InflateImpl.FIXED_HUFFMAN;
	}
	,readBytes: function(b,pos,len) {
		this.needed = len;
		this.outpos = pos;
		this.output = b;
		if(len > 0) while(this.inflateLoop()) {
		}
		return len - this.needed;
	}
	,getBits: function(n) {
		while(this.nbits < n) {
			this.bits |= this.input.readByte() << this.nbits;
			this.nbits += 8;
		}
		var b = this.bits & (1 << n) - 1;
		this.nbits -= n;
		this.bits >>= n;
		return b;
	}
	,getBit: function() {
		if(this.nbits == 0) {
			this.nbits = 8;
			this.bits = this.input.readByte();
		}
		var b = (this.bits & 1) == 1;
		this.nbits--;
		this.bits >>= 1;
		return b;
	}
	,getRevBits: function(n) {
		if(n == 0) return 0; else if(this.getBit()) return 1 << n - 1 | this.getRevBits(n - 1); else return this.getRevBits(n - 1);
	}
	,resetBits: function() {
		this.bits = 0;
		this.nbits = 0;
	}
	,addBytes: function(b,p,len) {
		this.window.addBytes(b,p,len);
		this.output.blit(this.outpos,b,p,len);
		this.needed -= len;
		this.outpos += len;
	}
	,addByte: function(b) {
		this.window.addByte(b);
		this.output.b[this.outpos] = b & 255;
		this.needed--;
		this.outpos++;
	}
	,addDistOne: function(n) {
		var c = this.window.getLastChar();
		var _g = 0;
		while(_g < n) {
			var i = _g++;
			this.addByte(c);
		}
	}
	,addDist: function(d,len) {
		this.addBytes(this.window.buffer,this.window.pos - d,len);
	}
	,applyHuffman: function(h) {
		switch(h[1]) {
		case 0:
			var n = h[2];
			return n;
		case 1:
			var b = h[3];
			var a = h[2];
			return this.applyHuffman(this.getBit()?b:a);
		case 2:
			var tbl = h[3];
			var n1 = h[2];
			return this.applyHuffman(tbl[this.getBits(n1)]);
		}
	}
	,inflateLengths: function(a,max) {
		var i = 0;
		var prev = 0;
		while(i < max) {
			var n = this.applyHuffman(this.huffman);
			switch(n) {
			case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:
				prev = n;
				a[i] = n;
				i++;
				break;
			case 16:
				var end = i + 3 + this.getBits(2);
				if(end > max) throw new js__$Boot_HaxeError("Invalid data");
				while(i < end) {
					a[i] = prev;
					i++;
				}
				break;
			case 17:
				i += 3 + this.getBits(3);
				if(i > max) throw new js__$Boot_HaxeError("Invalid data");
				break;
			case 18:
				i += 11 + this.getBits(7);
				if(i > max) throw new js__$Boot_HaxeError("Invalid data");
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid data");
			}
		}
	}
	,inflateLoop: function() {
		var _g = this.state;
		switch(_g[1]) {
		case 0:
			var cmf = this.input.readByte();
			var cm = cmf & 15;
			var cinfo = cmf >> 4;
			if(cm != 8) throw new js__$Boot_HaxeError("Invalid data");
			var flg = this.input.readByte();
			var fdict = (flg & 32) != 0;
			if(((cmf << 8) + flg) % 31 != 0) throw new js__$Boot_HaxeError("Invalid data");
			if(fdict) throw new js__$Boot_HaxeError("Unsupported dictionary");
			this.state = haxe_zip__$InflateImpl_State.Block;
			return true;
		case 4:
			var calc = this.window.checksum();
			if(calc == null) {
				this.state = haxe_zip__$InflateImpl_State.Done;
				return true;
			}
			var crc = haxe_crypto_Adler32.read(this.input);
			if(!calc.equals(crc)) throw new js__$Boot_HaxeError("Invalid CRC");
			this.state = haxe_zip__$InflateImpl_State.Done;
			return true;
		case 7:
			return false;
		case 1:
			this["final"] = this.getBit();
			var _g1 = this.getBits(2);
			switch(_g1) {
			case 0:
				this.len = this.input.readUInt16();
				var nlen = this.input.readUInt16();
				if(nlen != 65535 - this.len) throw new js__$Boot_HaxeError("Invalid data");
				this.state = haxe_zip__$InflateImpl_State.Flat;
				var r = this.inflateLoop();
				this.resetBits();
				return r;
			case 1:
				this.huffman = this.buildFixedHuffman();
				this.huffdist = null;
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			case 2:
				var hlit = this.getBits(5) + 257;
				var hdist = this.getBits(5) + 1;
				var hclen = this.getBits(4) + 4;
				var _g2 = 0;
				while(_g2 < hclen) {
					var i = _g2++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = this.getBits(3);
				}
				var _g21 = hclen;
				while(_g21 < 19) {
					var i1 = _g21++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i1]] = 0;
				}
				this.huffman = this.htools.make(this.lengths,0,19,8);
				var lengths = [];
				var _g3 = 0;
				var _g22 = hlit + hdist;
				while(_g3 < _g22) {
					var i2 = _g3++;
					lengths.push(0);
				}
				this.inflateLengths(lengths,hlit + hdist);
				this.huffdist = this.htools.make(lengths,hlit,hdist,16);
				this.huffman = this.htools.make(lengths,0,hlit,16);
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			default:
				throw new js__$Boot_HaxeError("Invalid data");
			}
			break;
		case 3:
			var rlen;
			if(this.len < this.needed) rlen = this.len; else rlen = this.needed;
			var bytes = this.input.read(rlen);
			this.len -= rlen;
			this.addBytes(bytes,0,rlen);
			if(this.len == 0) if(this["final"]) this.state = haxe_zip__$InflateImpl_State.Crc; else this.state = haxe_zip__$InflateImpl_State.Block;
			return this.needed > 0;
		case 6:
			var rlen1;
			if(this.len < this.needed) rlen1 = this.len; else rlen1 = this.needed;
			this.addDistOne(rlen1);
			this.len -= rlen1;
			if(this.len == 0) this.state = haxe_zip__$InflateImpl_State.CData;
			return this.needed > 0;
		case 5:
			while(this.len > 0 && this.needed > 0) {
				var rdist;
				if(this.len < this.dist) rdist = this.len; else rdist = this.dist;
				var rlen2;
				if(this.needed < rdist) rlen2 = this.needed; else rlen2 = rdist;
				this.addDist(this.dist,rlen2);
				this.len -= rlen2;
			}
			if(this.len == 0) this.state = haxe_zip__$InflateImpl_State.CData;
			return this.needed > 0;
		case 2:
			var n = this.applyHuffman(this.huffman);
			if(n < 256) {
				this.addByte(n);
				return this.needed > 0;
			} else if(n == 256) {
				if(this["final"]) this.state = haxe_zip__$InflateImpl_State.Crc; else this.state = haxe_zip__$InflateImpl_State.Block;
				return true;
			} else {
				n -= 257;
				var extra_bits = haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL[n];
				if(extra_bits == -1) throw new js__$Boot_HaxeError("Invalid data");
				this.len = haxe_zip_InflateImpl.LEN_BASE_VAL_TBL[n] + this.getBits(extra_bits);
				var dist_code;
				if(this.huffdist == null) dist_code = this.getRevBits(5); else dist_code = this.applyHuffman(this.huffdist);
				extra_bits = haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL[dist_code];
				if(extra_bits == -1) throw new js__$Boot_HaxeError("Invalid data");
				this.dist = haxe_zip_InflateImpl.DIST_BASE_VAL_TBL[dist_code] + this.getBits(extra_bits);
				if(this.dist > this.window.available()) throw new js__$Boot_HaxeError("Invalid data");
				if(this.dist == 1) this.state = haxe_zip__$InflateImpl_State.DistOne; else this.state = haxe_zip__$InflateImpl_State.Dist;
				return true;
			}
			break;
		}
	}
	,__class__: haxe_zip_InflateImpl
};
var haxe_zip_Uncompress = function() { };
$hxClasses["haxe.zip.Uncompress"] = haxe_zip_Uncompress;
haxe_zip_Uncompress.__name__ = true;
haxe_zip_Uncompress.run = function(src,bufsize) {
	return haxe_zip_InflateImpl.run(new haxe_io_BytesInput(src),bufsize);
};
var hxdom_TextAlign = $hxClasses["hxdom.TextAlign"] = { __ename__ : true, __constructs__ : ["Left","Center","Right"] };
hxdom_TextAlign.Left = ["Left",0];
hxdom_TextAlign.Left.toString = $estr;
hxdom_TextAlign.Left.__enum__ = hxdom_TextAlign;
hxdom_TextAlign.Center = ["Center",1];
hxdom_TextAlign.Center.toString = $estr;
hxdom_TextAlign.Center.__enum__ = hxdom_TextAlign;
hxdom_TextAlign.Right = ["Right",2];
hxdom_TextAlign.Right.toString = $estr;
hxdom_TextAlign.Right.__enum__ = hxdom_TextAlign;
var hxdom_BSTools = function() { };
$hxClasses["hxdom.BSTools"] = hxdom_BSTools;
hxdom_BSTools.__name__ = true;
hxdom_BSTools.container = function(e) {
	hxdom_DomTools.addClass(e,"container");
	return e;
};
hxdom_BSTools.lead = function(e) {
	hxdom_DomTools.addClass(e,"lead");
	return e;
};
hxdom_BSTools.textAlign = function(e,align) {
	hxdom_DomTools.addClass(e,(function($this) {
		var $r;
		switch(align[1]) {
		case 0:
			$r = "text-left";
			break;
		case 1:
			$r = "text-center";
			break;
		case 2:
			$r = "text-right";
			break;
		}
		return $r;
	}(this)));
	return e;
};
var hxdom_DomTools = function() { };
$hxClasses["hxdom.DomTools"] = hxdom_DomTools;
hxdom_DomTools.__name__ = true;
hxdom_DomTools.append = function(parent,child) {
	parent.node.appendChild(child.node);
	return parent;
};
hxdom_DomTools.remove = function(e) {
	e.node.parentNode.removeChild(e.node);
	return e;
};
hxdom_DomTools.empty = function(e) {
	while(e.node.firstChild != null) e.node.removeChild(e.node.firstChild);
	return e;
};
hxdom_DomTools.addClass = function(e,cls) {
	if(e.node.className == null || e.node.className == "") e.node.className = cls; else e.node.className += " " + cls;
	return e;
};
hxdom_DomTools.addText = function(e,text) {
	hxdom_DomTools.append(e,new hxdom_Text(text));
	return e;
};
hxdom_DomTools.setText = function(e,text) {
	hxdom_DomTools.empty(e);
	hxdom_DomTools.addText(e,text);
	return e;
};
hxdom_DomTools.setAttr = function(e,key,val) {
	var _g = Type["typeof"](val);
	switch(_g[1]) {
	case 3:
		if(val) e.node.setAttribute(key,key); else e.node.removeAttribute(key);
		break;
	default:
		e.node.setAttribute(key,Std.string(val));
	}
	return e;
};
hxdom_DomTools.parent = function(e) {
	var p = e.node.parentNode;
	if(p != null) return Reflect.field(p,"__vdom"); else return null;
};
hxdom_DomTools.observe = function(e) {
	new MutationObserver(function(changes,obs) {
		var _g = 0;
		while(_g < changes.length) {
			var i = changes[_g];
			++_g;
			var _g1 = 0;
			var _g2 = i.removedNodes;
			while(_g1 < _g2.length) {
				var o = _g2[_g1];
				++_g1;
				var vnode = Reflect.field(o,"__vdom");
				if(vnode != null) vnode.__onRemoved();
			}
			var _g11 = 0;
			var _g21 = i.addedNodes;
			while(_g11 < _g21.length) {
				var o1 = _g21[_g11];
				++_g11;
				var vnode1 = Reflect.field(o1,"__vdom");
				if(vnode1 != null) vnode1.__onAdded();
			}
		}
	}).observe(e.node,{ childList : true, subtree : true});
	return e;
};
var hxdom_VirtualNode = function(node) {
	this.node = node;
	node.__vdom = this;
	this.id = hxdom_VirtualNode.ID++;
	this.__inDom = node.nodeType == 1?(function($this) {
		var $r;
		var el = node;
		$r = $this.__inDomCached = el.tagName == "HTML";
		return $r;
	}(this)):this.__inDomCached = false;
};
$hxClasses["hxdom.VirtualNode"] = hxdom_VirtualNode;
hxdom_VirtualNode.__name__ = true;
hxdom_VirtualNode.buildElement = function(cls,tagName) {
	var el = window.document.createElement(tagName);
	return el;
};
hxdom_VirtualNode.buildText = function(txt) {
	return window.document.createTextNode(txt);
};
hxdom_VirtualNode.__super__ = EventTarget;
hxdom_VirtualNode.prototype = $extend(EventTarget.prototype,{
	addEventListener: function(type,listener,useCapture) {
		if(useCapture == null) useCapture = false;
		this.node.addEventListener(type,listener,useCapture);
	}
	,onAdded: function() {
	}
	,onRemoved: function() {
	}
	,__onAdded: function() {
		this.onAdded();
		var _g1 = 0;
		var _g = this.node.childNodes.length;
		while(_g1 < _g) {
			var i = _g1++;
			var vn = Reflect.field(this.node.childNodes[i],"__vdom");
			if(vn != null) vn.__onAdded();
		}
	}
	,__onRemoved: function() {
		this.onRemoved();
		var _g1 = 0;
		var _g = this.node.childNodes.length;
		while(_g1 < _g) {
			var i = _g1++;
			var vn = Reflect.field(this.node.childNodes[i],"__vdom");
			if(vn != null) vn.__onRemoved();
		}
	}
	,__class__: hxdom_VirtualNode
});
var hxdom_VirtualElement = function(element) {
	hxdom_VirtualNode.call(this,element);
};
$hxClasses["hxdom.VirtualElement"] = hxdom_VirtualElement;
hxdom_VirtualElement.__name__ = true;
hxdom_VirtualElement.__super__ = hxdom_VirtualNode;
hxdom_VirtualElement.prototype = $extend(hxdom_VirtualNode.prototype,{
	__class__: hxdom_VirtualElement
});
var hxdom_EBody = function() {
	hxdom_VirtualElement.call(this,hxdom_VirtualNode.buildElement(HTMLBodyElement,"BODY"));
};
$hxClasses["hxdom.EBody"] = hxdom_EBody;
hxdom_EBody.__name__ = true;
hxdom_EBody.__super__ = hxdom_VirtualElement;
hxdom_EBody.prototype = $extend(hxdom_VirtualElement.prototype,{
	__class__: hxdom_EBody
});
var hxdom_EDiv = function() {
	hxdom_VirtualElement.call(this,hxdom_VirtualNode.buildElement(HTMLDivElement,"DIV"));
};
$hxClasses["hxdom.EDiv"] = hxdom_EDiv;
hxdom_EDiv.__name__ = true;
hxdom_EDiv.__super__ = hxdom_VirtualElement;
hxdom_EDiv.prototype = $extend(hxdom_VirtualElement.prototype,{
	__class__: hxdom_EDiv
});
var hxdom_EHeader1 = function() {
	hxdom_VirtualElement.call(this,hxdom_VirtualNode.buildElement(HTMLElement,"H1"));
};
$hxClasses["hxdom.EHeader1"] = hxdom_EHeader1;
hxdom_EHeader1.__name__ = true;
hxdom_EHeader1.__super__ = hxdom_VirtualElement;
hxdom_EHeader1.prototype = $extend(hxdom_VirtualElement.prototype,{
	__class__: hxdom_EHeader1
});
var hxdom_EHtml = function() { };
$hxClasses["hxdom.EHtml"] = hxdom_EHtml;
hxdom_EHtml.__name__ = true;
hxdom_EHtml.__super__ = hxdom_VirtualElement;
hxdom_EHtml.prototype = $extend(hxdom_VirtualElement.prototype,{
	__class__: hxdom_EHtml
});
var hxdom_EParagraph = function() {
	hxdom_VirtualElement.call(this,hxdom_VirtualNode.buildElement(HTMLParagraphElement,"P"));
};
$hxClasses["hxdom.EParagraph"] = hxdom_EParagraph;
hxdom_EParagraph.__name__ = true;
hxdom_EParagraph.__super__ = hxdom_VirtualElement;
hxdom_EParagraph.prototype = $extend(hxdom_VirtualElement.prototype,{
	__class__: hxdom_EParagraph
});
var hxdom_ETable = function() {
	hxdom_VirtualElement.call(this,hxdom_VirtualNode.buildElement(HTMLTableElement,"TABLE"));
};
$hxClasses["hxdom.ETable"] = hxdom_ETable;
hxdom_ETable.__name__ = true;
hxdom_ETable.__super__ = hxdom_VirtualElement;
hxdom_ETable.prototype = $extend(hxdom_VirtualElement.prototype,{
	__class__: hxdom_ETable
});
var hxdom_ETableBody = function() {
	hxdom_VirtualElement.call(this,hxdom_VirtualNode.buildElement(HTMLTableSectionElement,"TBODY"));
};
$hxClasses["hxdom.ETableBody"] = hxdom_ETableBody;
hxdom_ETableBody.__name__ = true;
hxdom_ETableBody.__super__ = hxdom_VirtualElement;
hxdom_ETableBody.prototype = $extend(hxdom_VirtualElement.prototype,{
	__class__: hxdom_ETableBody
});
var hxdom_ETableCell = function() {
	hxdom_VirtualElement.call(this,hxdom_VirtualNode.buildElement(HTMLTableCellElement,"TD"));
};
$hxClasses["hxdom.ETableCell"] = hxdom_ETableCell;
hxdom_ETableCell.__name__ = true;
hxdom_ETableCell.__super__ = hxdom_VirtualElement;
hxdom_ETableCell.prototype = $extend(hxdom_VirtualElement.prototype,{
	__class__: hxdom_ETableCell
});
var hxdom_ETextArea = function() {
	hxdom_VirtualElement.call(this,hxdom_VirtualNode.buildElement(HTMLTextAreaElement,"TEXTAREA"));
};
$hxClasses["hxdom.ETextArea"] = hxdom_ETextArea;
hxdom_ETextArea.__name__ = true;
hxdom_ETextArea.__super__ = hxdom_VirtualElement;
hxdom_ETextArea.prototype = $extend(hxdom_VirtualElement.prototype,{
	__class__: hxdom_ETextArea
});
var hxdom_ETableHeaderCell = function() {
	hxdom_VirtualElement.call(this,hxdom_VirtualNode.buildElement(HTMLTableCellElement,"TH"));
};
$hxClasses["hxdom.ETableHeaderCell"] = hxdom_ETableHeaderCell;
hxdom_ETableHeaderCell.__name__ = true;
hxdom_ETableHeaderCell.__super__ = hxdom_VirtualElement;
hxdom_ETableHeaderCell.prototype = $extend(hxdom_VirtualElement.prototype,{
	__class__: hxdom_ETableHeaderCell
});
var hxdom_ETableHeader = function() {
	hxdom_VirtualElement.call(this,hxdom_VirtualNode.buildElement(HTMLTableSectionElement,"THEAD"));
};
$hxClasses["hxdom.ETableHeader"] = hxdom_ETableHeader;
hxdom_ETableHeader.__name__ = true;
hxdom_ETableHeader.__super__ = hxdom_VirtualElement;
hxdom_ETableHeader.prototype = $extend(hxdom_VirtualElement.prototype,{
	__class__: hxdom_ETableHeader
});
var hxdom_ETableRow = function() {
	hxdom_VirtualElement.call(this,hxdom_VirtualNode.buildElement(HTMLTableRowElement,"TR"));
};
$hxClasses["hxdom.ETableRow"] = hxdom_ETableRow;
hxdom_ETableRow.__name__ = true;
hxdom_ETableRow.__super__ = hxdom_VirtualElement;
hxdom_ETableRow.prototype = $extend(hxdom_VirtualElement.prototype,{
	__class__: hxdom_ETableRow
});
var hxdom_Text = function(txt) {
	hxdom_VirtualNode.call(this,hxdom_VirtualNode.buildText(txt));
};
$hxClasses["hxdom.Text"] = hxdom_Text;
hxdom_Text.__name__ = true;
hxdom_Text.__super__ = hxdom_VirtualNode;
hxdom_Text.prototype = $extend(hxdom_VirtualNode.prototype,{
	__class__: hxdom_Text
});
var hxdom_SFunc = function(inst,func,origFunc) {
	this.inst = inst;
	this.func = func;
};
$hxClasses["hxdom.SFunc"] = hxdom_SFunc;
hxdom_SFunc.__name__ = true;
hxdom_SFunc.prototype = {
	call: function(args) {
		if(args == null) args = [];
		return Reflect.callMethod(this.inst,Reflect.field(this.inst,this.func),args);
	}
	,__class__: hxdom_SFunc
};
var hxdom_bootstrap_Modal = function() { };
$hxClasses["hxdom.bootstrap.Modal"] = hxdom_bootstrap_Modal;
hxdom_bootstrap_Modal.__name__ = true;
hxdom_bootstrap_Modal.__super__ = hxdom_EDiv;
hxdom_bootstrap_Modal.prototype = $extend(hxdom_EDiv.prototype,{
	__class__: hxdom_bootstrap_Modal
});
var hxdom_bootstrap_ModalGroup = function() {
	hxdom_EDiv.call(this);
	this.backdrop = hxdom_DomTools.addClass(new hxdom_EDiv(),"modal-backdrop in");
	hxdom_DomTools.append(this,this.backdrop);
	this.modals = [];
	this.updateVisibility();
};
$hxClasses["hxdom.bootstrap.ModalGroup"] = hxdom_bootstrap_ModalGroup;
hxdom_bootstrap_ModalGroup.__name__ = true;
hxdom_bootstrap_ModalGroup.__super__ = hxdom_EDiv;
hxdom_bootstrap_ModalGroup.prototype = $extend(hxdom_EDiv.prototype,{
	updateVisibility: function() {
		this.node.style.display = "none";
		var _g = 0;
		var _g1 = this.modals;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(i.visible) {
				this.node.style.display = "block";
				break;
			}
		}
	}
	,__class__: hxdom_bootstrap_ModalGroup
});
var hxdom_bootstrap_PanelType = $hxClasses["hxdom.bootstrap.PanelType"] = { __ename__ : true, __constructs__ : ["Default","Primary","Success","Info","Warning","Danger"] };
hxdom_bootstrap_PanelType.Default = ["Default",0];
hxdom_bootstrap_PanelType.Default.toString = $estr;
hxdom_bootstrap_PanelType.Default.__enum__ = hxdom_bootstrap_PanelType;
hxdom_bootstrap_PanelType.Primary = ["Primary",1];
hxdom_bootstrap_PanelType.Primary.toString = $estr;
hxdom_bootstrap_PanelType.Primary.__enum__ = hxdom_bootstrap_PanelType;
hxdom_bootstrap_PanelType.Success = ["Success",2];
hxdom_bootstrap_PanelType.Success.toString = $estr;
hxdom_bootstrap_PanelType.Success.__enum__ = hxdom_bootstrap_PanelType;
hxdom_bootstrap_PanelType.Info = ["Info",3];
hxdom_bootstrap_PanelType.Info.toString = $estr;
hxdom_bootstrap_PanelType.Info.__enum__ = hxdom_bootstrap_PanelType;
hxdom_bootstrap_PanelType.Warning = ["Warning",4];
hxdom_bootstrap_PanelType.Warning.toString = $estr;
hxdom_bootstrap_PanelType.Warning.__enum__ = hxdom_bootstrap_PanelType;
hxdom_bootstrap_PanelType.Danger = ["Danger",5];
hxdom_bootstrap_PanelType.Danger.toString = $estr;
hxdom_bootstrap_PanelType.Danger.__enum__ = hxdom_bootstrap_PanelType;
var hxdom_bootstrap_Panel = function(type) {
	hxdom_EDiv.call(this);
	if(type == null) type = hxdom_bootstrap_PanelType.Default;
	hxdom_DomTools.addClass(this,"panel");
	if(type != null) switch(type[1]) {
	case 0:
		hxdom_DomTools.addClass(this,"panel-default");
		break;
	case 1:
		hxdom_DomTools.addClass(this,"panel-primary");
		break;
	case 2:
		hxdom_DomTools.addClass(this,"panel-success");
		break;
	case 3:
		hxdom_DomTools.addClass(this,"panel-info");
		break;
	case 4:
		hxdom_DomTools.addClass(this,"panel-warning");
		break;
	case 5:
		hxdom_DomTools.addClass(this,"panel-danger");
		break;
	}
	this.body = hxdom_DomTools.addClass(new hxdom_EDiv(),"panel-body");
	hxdom_DomTools.append(this,this.body);
};
$hxClasses["hxdom.bootstrap.Panel"] = hxdom_bootstrap_Panel;
hxdom_bootstrap_Panel.__name__ = true;
hxdom_bootstrap_Panel.__super__ = hxdom_EDiv;
hxdom_bootstrap_Panel.prototype = $extend(hxdom_EDiv.prototype,{
	__class__: hxdom_bootstrap_Panel
});
var hxdom_bootstrap_TableOptions = $hxClasses["hxdom.bootstrap.TableOptions"] = { __ename__ : true, __constructs__ : ["Striped","Bordered","Hover","Condensed"] };
hxdom_bootstrap_TableOptions.Striped = ["Striped",0];
hxdom_bootstrap_TableOptions.Striped.toString = $estr;
hxdom_bootstrap_TableOptions.Striped.__enum__ = hxdom_bootstrap_TableOptions;
hxdom_bootstrap_TableOptions.Bordered = ["Bordered",1];
hxdom_bootstrap_TableOptions.Bordered.toString = $estr;
hxdom_bootstrap_TableOptions.Bordered.__enum__ = hxdom_bootstrap_TableOptions;
hxdom_bootstrap_TableOptions.Hover = ["Hover",2];
hxdom_bootstrap_TableOptions.Hover.toString = $estr;
hxdom_bootstrap_TableOptions.Hover.__enum__ = hxdom_bootstrap_TableOptions;
hxdom_bootstrap_TableOptions.Condensed = ["Condensed",3];
hxdom_bootstrap_TableOptions.Condensed.toString = $estr;
hxdom_bootstrap_TableOptions.Condensed.__enum__ = hxdom_bootstrap_TableOptions;
var hxdom_bootstrap_TableEmphasis = $hxClasses["hxdom.bootstrap.TableEmphasis"] = { __ename__ : true, __constructs__ : ["Active","Success","Warning","Danger"] };
hxdom_bootstrap_TableEmphasis.Active = ["Active",0];
hxdom_bootstrap_TableEmphasis.Active.toString = $estr;
hxdom_bootstrap_TableEmphasis.Active.__enum__ = hxdom_bootstrap_TableEmphasis;
hxdom_bootstrap_TableEmphasis.Success = ["Success",1];
hxdom_bootstrap_TableEmphasis.Success.toString = $estr;
hxdom_bootstrap_TableEmphasis.Success.__enum__ = hxdom_bootstrap_TableEmphasis;
hxdom_bootstrap_TableEmphasis.Warning = ["Warning",2];
hxdom_bootstrap_TableEmphasis.Warning.toString = $estr;
hxdom_bootstrap_TableEmphasis.Warning.__enum__ = hxdom_bootstrap_TableEmphasis;
hxdom_bootstrap_TableEmphasis.Danger = ["Danger",3];
hxdom_bootstrap_TableEmphasis.Danger.toString = $estr;
hxdom_bootstrap_TableEmphasis.Danger.__enum__ = hxdom_bootstrap_TableEmphasis;
var hxdom_bootstrap_Table = function(opts) {
	hxdom_ETable.call(this);
	hxdom_DomTools.addClass(this,"table");
	if(opts != null) this.setOptions(opts);
};
$hxClasses["hxdom.bootstrap.Table"] = hxdom_bootstrap_Table;
hxdom_bootstrap_Table.__name__ = true;
hxdom_bootstrap_Table.build = function(data,opts) {
	var head = new hxdom_ETableHeader();
	var body = new hxdom_ETableBody();
	var firstRow = true;
	var $it0 = $iterator(data)();
	while( $it0.hasNext() ) {
		var i = $it0.next();
		var row = new hxdom_bootstrap_TableRow();
		if(firstRow) {
			var $it1 = $iterator(i)();
			while( $it1.hasNext() ) {
				var o = $it1.next();
				hxdom_DomTools.append(row,hxdom_DomTools.append(new hxdom_bootstrap_BSTableHeaderCell(),o));
			}
			hxdom_DomTools.append(head,row);
			firstRow = false;
		} else {
			var $it2 = $iterator(i)();
			while( $it2.hasNext() ) {
				var o1 = $it2.next();
				hxdom_DomTools.append(row,hxdom_DomTools.append(new hxdom_bootstrap_TableCell(),o1));
			}
			hxdom_DomTools.append(body,row);
		}
	}
	return hxdom_DomTools.append(hxdom_DomTools.append(new hxdom_bootstrap_Table(opts),head),body);
};
hxdom_bootstrap_Table.__super__ = hxdom_ETable;
hxdom_bootstrap_Table.prototype = $extend(hxdom_ETable.prototype,{
	setOptions: function(opts) {
		this.node.className = "table";
		var $it0 = $iterator(opts)();
		while( $it0.hasNext() ) {
			var i = $it0.next();
			hxdom_DomTools.addClass(this,(function($this) {
				var $r;
				switch(i[1]) {
				case 0:
					$r = "table-striped";
					break;
				case 1:
					$r = "table-bordered";
					break;
				case 2:
					$r = "table-hover";
					break;
				case 3:
					$r = "table-condensed";
					break;
				}
				return $r;
			}(this)));
		}
	}
	,__class__: hxdom_bootstrap_Table
});
var hxdom_bootstrap_TableRow = function(emphasis) {
	hxdom_ETableRow.call(this);
	if(emphasis != null) hxdom_DomTools.addClass(this,(function($this) {
		var $r;
		switch(emphasis[1]) {
		case 0:
			$r = "active";
			break;
		case 1:
			$r = "success";
			break;
		case 2:
			$r = "warning";
			break;
		case 3:
			$r = "danger";
			break;
		}
		return $r;
	}(this)));
};
$hxClasses["hxdom.bootstrap.TableRow"] = hxdom_bootstrap_TableRow;
hxdom_bootstrap_TableRow.__name__ = true;
hxdom_bootstrap_TableRow.__super__ = hxdom_ETableRow;
hxdom_bootstrap_TableRow.prototype = $extend(hxdom_ETableRow.prototype,{
	__class__: hxdom_bootstrap_TableRow
});
var hxdom_bootstrap_BSTableHeaderCell = function(emphasis) {
	hxdom_ETableHeaderCell.call(this);
	if(emphasis != null) hxdom_DomTools.addClass(this,(function($this) {
		var $r;
		switch(emphasis[1]) {
		case 0:
			$r = "active";
			break;
		case 1:
			$r = "success";
			break;
		case 2:
			$r = "warning";
			break;
		case 3:
			$r = "danger";
			break;
		}
		return $r;
	}(this)));
};
$hxClasses["hxdom.bootstrap.BSTableHeaderCell"] = hxdom_bootstrap_BSTableHeaderCell;
hxdom_bootstrap_BSTableHeaderCell.__name__ = true;
hxdom_bootstrap_BSTableHeaderCell.__super__ = hxdom_ETableHeaderCell;
hxdom_bootstrap_BSTableHeaderCell.prototype = $extend(hxdom_ETableHeaderCell.prototype,{
	__class__: hxdom_bootstrap_BSTableHeaderCell
});
var hxdom_bootstrap_TableCell = function(emphasis) {
	hxdom_ETableCell.call(this);
	if(emphasis != null) hxdom_DomTools.addClass(this,(function($this) {
		var $r;
		switch(emphasis[1]) {
		case 0:
			$r = "active";
			break;
		case 1:
			$r = "success";
			break;
		case 2:
			$r = "warning";
			break;
		case 3:
			$r = "danger";
			break;
		}
		return $r;
	}(this)));
};
$hxClasses["hxdom.bootstrap.TableCell"] = hxdom_bootstrap_TableCell;
hxdom_bootstrap_TableCell.__name__ = true;
hxdom_bootstrap_TableCell.__super__ = hxdom_ETableCell;
hxdom_bootstrap_TableCell.prototype = $extend(hxdom_ETableCell.prototype,{
	__class__: hxdom_bootstrap_TableCell
});
var hxdom_js_Boot = function() {
	haxe_Unserializer.call(this,"");
	this.elementLookup = new haxe_ds_IntMap();
	this.initFuncs = new List();
};
$hxClasses["hxdom.js.Boot"] = hxdom_js_Boot;
hxdom_js_Boot.__name__ = true;
hxdom_js_Boot.init = function() {
	var html = window.document.childNodes[1];
	var boot = new hxdom_js_Boot();
	boot.buildElementLookup(html);
	boot.unserializeNode(html);
	var _g_head = boot.initFuncs.h;
	var _g_val = null;
	while(_g_head != null) {
		var i;
		i = (function($this) {
			var $r;
			_g_val = _g_head[0];
			_g_head = _g_head[1];
			$r = _g_val;
			return $r;
		}(this));
		i.call();
	}
	var body = Reflect.field(window.document.body,"__vdom");
	var observe = Reflect.field(body,"__observe");
	if(observe) hxdom_DomTools.observe(body);
	return Reflect.field(html,"__vdom");
};
hxdom_js_Boot.__super__ = haxe_Unserializer;
hxdom_js_Boot.prototype = $extend(haxe_Unserializer.prototype,{
	element: function(e) {
		var velem = Reflect.field(e,"__vdom");
		if(js_Boot.__instanceof(velem,hxdom_js_ClientOnly)) this.initFuncs.add(new hxdom_SFunc(velem,"__hxdomBoot",null));
		if(Object.prototype.hasOwnProperty.call(e.dataset,"hxevents")) {
			var listeners = this.doUnserialize(Reflect.field(e.dataset,"hxevents"));
			var $it0 = listeners.keys();
			while( $it0.hasNext() ) {
				var eventType = $it0.next();
				var _g = (__map_reserved[eventType] != null?listeners.getReserved(eventType):listeners.h[eventType]).iterator();
				while(_g.head != null) {
					var eh = [(function($this) {
						var $r;
						_g.val = _g.head[0];
						_g.head = _g.head[1];
						$r = _g.val;
						return $r;
					}(this))];
					e.addEventListener(eventType,(function(eh) {
						return function(e1) {
							eh[0].handler.call([e1]);
						};
					})(eh),eh[0].cap);
				}
			}
		}
		var sortedFields = Reflect.fields(e.dataset);
		sortedFields.sort(function(a,b) {
			if(a < b) return -1; else return 1;
		});
		var _g1 = 0;
		while(_g1 < sortedFields.length) {
			var i = sortedFields[_g1];
			++_g1;
			if(StringTools.startsWith(i,"hxd")) {
				var key = HxOverrides.substr(i,3,null);
				Reflect.setField(velem,key,this.doUnserialize(Reflect.field(e.dataset,i)));
			}
		}
	}
	,unserializeNode: function(node) {
		var _g = node.nodeType;
		switch(_g) {
		case 1:
			this.element(node);
			var _g2 = 0;
			var _g1 = node.childNodes.length;
			while(_g2 < _g1) {
				var i = _g2++;
				this.unserializeNode(node.childNodes[i]);
			}
			break;
		}
	}
	,buildElementLookup: function(node) {
		if(node.nodeType == 1) {
			var el = node;
			var cls = Type.resolveClass(Reflect.field(el.dataset,"hxclass"));
			if(cls != null) {
				var velem = Type.createEmptyInstance(cls);
				node.__vdom = velem;
				velem.node = node;
				var first = true;
				var remainingStr = null;
				var child = node.firstChild;
				var _g = 0;
				var _g1 = el.getAttribute("data-hxid").split(" ");
				while(_g < _g1.length) {
					var i = _g1[_g];
					++_g;
					if(first) {
						var id = Std.parseInt(i);
						velem.id = id;
						this.elementLookup.h[id] = node;
						first = false;
					} else {
						var dash = i.indexOf("-");
						var id1 = Std.parseInt(HxOverrides.substr(i,0,dash));
						var len = Std.parseInt(HxOverrides.substr(i,dash + 1,null));
						var nodeToAdd = null;
						if(len > 0) {
							while(child.nodeType != 3) child = child.nextSibling;
							var txt = child;
							nodeToAdd = child;
							if(remainingStr == null && txt.length == len) child = child.nextSibling; else if(remainingStr == null) {
								remainingStr = HxOverrides.substr(txt.data,len,null);
								txt.data = HxOverrides.substr(txt.data,0,len);
							} else {
								nodeToAdd = window.document.createTextNode(HxOverrides.substr(remainingStr,0,len));
								node.insertBefore(nodeToAdd,child.nextSibling);
								if(remainingStr.length == len) remainingStr = null; else remainingStr = HxOverrides.substr(remainingStr,len,null);
								child = child.nextSibling;
							}
						} else {
							nodeToAdd = window.document.createTextNode("");
							node.insertBefore(nodeToAdd,child);
						}
						var vdomText = Type.createEmptyInstance(hxdom_Text);
						vdomText.id = id1;
						vdomText.node = nodeToAdd;
						nodeToAdd.__vdom = vdomText;
						this.elementLookup.h[id1] = nodeToAdd;
					}
				}
				var _g11 = 0;
				var _g2 = node.childNodes.length;
				while(_g11 < _g2) {
					var i1 = _g11++;
					this.buildElementLookup(node.childNodes[i1]);
				}
			} else {
				var unused = Reflect.field(el.dataset,"hxunused");
				if(unused != null) {
					var _g12 = 0;
					var _g3 = node.childNodes.length;
					while(_g12 < _g3) {
						var i2 = _g12++;
						this.buildElementLookup(node.childNodes[i2]);
					}
					node.parentElement.removeChild(node);
				}
			}
		}
	}
	,doUnserialize: function(str) {
		this.buf = str;
		this.pos = 0;
		this.length = str.length;
		return this.unserialize();
	}
	,unserialize: function() {
		var _g = this.buf.charCodeAt(this.pos);
		switch(_g) {
		case 68:
			this.pos++;
			var e;
			var key = this.readDigits();
			e = this.elementLookup.h[key];
			if(e == null) throw new js__$Boot_HaxeError("Missing element reference!");
			return Reflect.field(e,"__vdom");
		case 79:
			this.pos++;
			var name = haxe_Unserializer.prototype.unserialize.call(this);
			return Type.resolveClass(name);
		case 99:
			var inst = haxe_Unserializer.prototype.unserialize.call(this);
			if(js_Boot.__instanceof(inst,hxdom_js_ClientOnly)) this.initFuncs.add(new hxdom_SFunc(inst,"__hxdomBoot",null));
			return inst;
		default:
			return haxe_Unserializer.prototype.unserialize.call(this);
		}
	}
	,__class__: hxdom_js_Boot
});
var hxdom_js_ClientOnly = function() { };
$hxClasses["hxdom.js.ClientOnly"] = hxdom_js_ClientOnly;
hxdom_js_ClientOnly.__name__ = true;
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) Error.captureStackTrace(this,js__$Boot_HaxeError);
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) return Array; else {
		var cl = o.__class__;
		if(cl != null) return cl;
		var name = js_Boot.__nativeClassName(o);
		if(name != null) return js_Boot.__resolveNativeClass(name);
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) return "null";
	if(s.length >= 5) return "<...>";
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) t = "object";
	switch(t) {
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) return o[0];
				var str2 = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i1 = _g1++;
					if(i1 != 2) str2 += "," + js_Boot.__string_rec(o[i1],s); else str2 += js_Boot.__string_rec(o[i1],s);
				}
				return str2 + ")";
			}
			var l = o.length;
			var i;
			var str1 = "[";
			s += "\t";
			var _g2 = 0;
			while(_g2 < l) {
				var i2 = _g2++;
				str1 += (i2 > 0?",":"") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") return s2;
		}
		var k = null;
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) str += ", \n";
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "function":
		return "<function>";
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) return false;
	if(cc == cl) return true;
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) return true;
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) return false;
	switch(cl) {
	case Int:
		return (o|0) === o;
	case Float:
		return typeof(o) == "number";
	case Bool:
		return typeof(o) == "boolean";
	case String:
		return typeof(o) == "string";
	case Array:
		return (o instanceof Array) && o.__enum__ == null;
	case Dynamic:
		return true;
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) return true;
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) return true;
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) return true;
			}
		} else return false;
		if(cl == Class && o.__name__ != null) return true;
		if(cl == Enum && o.__ename__ != null) return true;
		return o.__enum__ == cl;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") return null;
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g = 0;
		while(_g < len) {
			var i = _g++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
$hxClasses["js.html.compat.ArrayBuffer"] = js_html_compat_ArrayBuffer;
js_html_compat_ArrayBuffer.__name__ = true;
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null?null:end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_Uint8Array = function() { };
$hxClasses["js.html.compat.Uint8Array"] = js_html_compat_Uint8Array;
js_html_compat_Uint8Array.__name__ = true;
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g = 0;
		while(_g < arg1) {
			var i = _g++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) offset = 0;
		if(length == null) length = buffer.byteLength - offset;
		if(offset == 0) arr = buffer.a; else arr = buffer.a.slice(offset,offset + length);
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	var t = this;
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > t.byteLength) throw new js__$Boot_HaxeError("set() outside of range");
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			t[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > t.byteLength) throw new js__$Boot_HaxeError("set() outside of range");
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			t[i1 + offset] = a1[i1];
		}
	} else throw new js__$Boot_HaxeError("TODO");
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var t = this;
	var a = js_html_compat_Uint8Array._new(t.slice(start,end));
	a.byteOffset = start;
	return a;
};
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
$hxClasses.Math = Math;
String.prototype.__class__ = $hxClasses.String = String;
String.__name__ = true;
$hxClasses.Array = Array;
Array.__name__ = true;
Date.prototype.__class__ = $hxClasses.Date = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses.Int = { __name__ : ["Int"]};
var Dynamic = $hxClasses.Dynamic = { __name__ : ["Dynamic"]};
var Float = $hxClasses.Float = Number;
Float.__name__ = ["Float"];
var Bool = $hxClasses.Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses.Class = { __name__ : ["Class"]};
var Enum = { };
haxe_Resource.content = [{ name : "serialized_kanji_dict", data : ""},{ name : "cc_disclaimer", data : "VGhlIGthbmppcyBhbmQgYXNzb2NpYXRlZCBtZWFuaW5ncyBiZWxvbmcgdG8gdGhlIEVsZWN0cm9uaWMgRGljdGlvbmFyeSBSZXNlYXJjaCBhbmQgRGV2ZWxvcG1lbnQgR3JvdXBbMV0gYW5kIGFyZSBkaXN0cmlidXRlZCB1bmRlciBDcmVhdGl2ZSBDb21tb25zIEF0dHJpYnV0aW9uLVNoYXJlQWxpa2UgTGljZW5jZSAoVjMuMCkgYXMgc3BlY2lmaWVkIGluIHRoZSBsaWNlbnNlIG9mIGl0cyBvcmlnaW5hbCB3ZWIgcGFnZSBbMl0uCkFsbCBjb250ZW50cyBhcmUgdGhlIHNhbWUgYXMgdGhlIG9yaWdpbmFsIHVubW9kaWZpZWQgc291cmNlcyBmcm9tIHRoZSBFbGVjdHJvbmljIERpY3Rpb25hcnkgUmVzZWFyY2ggYW5kIERldmVsb3BtZW50IEdyb3VwIHdlYnBhZ2UuCgpbMV0gaHR0cDovL3d3dy5jc3NlLm1vbmFzaC5lZHUuYXUvfmp3Yi9rYW5qaWRpYzIvaW5kZXguaHRtbApbMl0gaHR0cDovL3d3dy5lZHJkZy5vcmcvZWRyZGcvbGljZW5jZS5odG1sCg"}];
var __map_reserved = {}
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
MainJS.exampleText = "私は日本語の学生です";
haxe_Unserializer.DEFAULT_RESOLVER = Type;
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_ds_ObjectMap.count = 0;
haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL = [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,-1,-1];
haxe_zip_InflateImpl.LEN_BASE_VAL_TBL = [3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258];
haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL = [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,-1,-1];
haxe_zip_InflateImpl.DIST_BASE_VAL_TBL = [1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577];
haxe_zip_InflateImpl.CODE_LENGTHS_POS = [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
hxdom_VirtualNode.ID = 0;
js_Boot.__toStr = {}.toString;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
MainJS.main();
})(typeof console != "undefined" ? console : {log:function(){}}, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
